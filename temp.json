import React, { useState } from 'react';
import './App.css';

function App() {
    const [sections, setSections] = useState([
        { id: 1, title: "Section 1", content: "Mnemonic", open: false },
        { id: 2, title: "Section 2", content: "Email Entry", open: false },
        { id: 3, title: "Section 3", content: "Blank", open: false }
    ]);
    const [canType, setCanType] = useState(false);
    const [textInput, setTextInput] = useState('');

    const toggleSection = (id) => {
        setSections(prevSections =>
            prevSections.map(section =>
                section.id === id ? { ...section, open: !section.open } : section
            )
        );
    };

    const handleTextInputChange = (event) => {
        setTextInput(event.target.value);
    };

    const downloadJsonFile = () => {
        const element = document.createElement("a");
        const file = new Blob([JSON.stringify({ text: textInput }, null, 2)], {type: 'application/json'});
        element.href = URL.createObjectURL(file);
        element.download = "generated.json";
        document.body.appendChild(element); // Required for this to work in FireFox
        element.click();
    };

    return (
        <div className="app">
            <header className="app-header">
                PNC VFaaS JSON Generator
            </header>
            <div className="content-area">
                <div className="sidebar">
                    {sections.map(section => (
                        <div key={section.id} className="section">
                            <div className="section-header" onClick={() => toggleSection(section.id)}>
                                {section.title} {section.open ? '▼' : '▶'}
                            </div>
                            {section.open && <div className="section-content">
                                {section.content}
                            </div>}
                        </div>
                    ))}
                    <div className="switch-container">
                        <label>
                            <input
                                type="checkbox"
                                checked={canType}
                                onChange={(e) => setCanType(e.target.checked)}
                            />
                            Enable Editing
                        </label>
                    </div>
                </div>
                <div className="main-content">
                    {/* This is the center blank section */}
                </div>
                <div className="text-entry">
                    <textarea 
                        placeholder="No Information Provided Yet..."
                        disabled={!canType}
                        value={textInput}
                        onChange={handleTextInputChange}
                        style={{ width: '100%', height: '80%', marginTop: '20px' }}
                    />
                    <div className="buttons-container">
                    <button onClick={downloadJsonFile}>Download JSON</button>
                        <button>Test</button>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default App;



body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
